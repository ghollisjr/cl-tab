* TODO Added options for weighted histograms
Maybe even add binning options for hist-agg.

* DONE Fix hist-agg field usage
I used (field ...) without type in hist-agg, but I don't want
performance to suffer since this looks like a useful operator.  Make
sure to generate keywords from fields specified and generate plist row
results, using (field ... list) to make sure lists are used for
grouping.

* DONE [15/15] plist api conversion
All table functions should use plists for table row I/O, passing these
to functions and expecting them by default, with the exceptional case
being lists of plain data and explicitly specified field names.

In addition, to ease use, a control parameter *field-case-convert*
should be provided which allows three states:

- NIL:     preserve all field name case
- T:       Up-case all field names
- :invert: Change field names to all-upper before intern, then
           all-lower as a field name string

- [X] Create *field-case-convert*

Function plist conversions:
- [X] make-table
- [X] table-map
- [X] table-ref
- [X] insert!
- [X] delete!
- [X] aggregate
- [X] join
- [X] %join-loop
- [X] %join-hash
- [X] filter
- [X] update!
- [X] table-sort! / tsort!
- [X] Deprecate tlet (removed)
- [X] Implement tlambda

* TODO [10/14] Lisp library
- [X] Table data type
- [X] Table mapping
- [X] Table iteration (dotable)
- [X] Table record insertion
- [X] Table record deletion
- [X] Table aggregations, including grouping
- [X] Table joins (full, left, right, inner)

  UPDATE: The join system is fully operational, although there was a
  change to the handling of equijoins, namely: Instead of lists of
  field specifiers, a list of two functions, call them left and right,
  are supplied such that left accepts the rows of previously joined
  tables in reverse order of join, and right accepts a row from the
  new table being joined.  This is sufficient to support any kind of
  equijoin on fields as well as equijoins on functions of fields,
  which is desirable often enough in my opinion that the special
  semantics to support plain fields was not justifiable.  Some of the
  lower level functions already supported this and have not been
  updated to remove that functionality, but such behavior is
  deprecated.

  UPDATE: To the end of a single join function as described in part
  below, I have defined %join-loop and %join-hash which implement
  binary hash and loop joins, respectively.  Both support all types of
  joins (inner, left, right, full), so the last piece of the join
  library is a unified front end to these joins which will allow
  different "on" specifications to determine the specific type of join
  to use between two tables.  The basic on-forms I intend to support
  are

  - (on tab2 fn &key (type :inner))
  - (on tab2 eqs &key (type :inner) (test 'equal))

  In this case, I intend to have an #'on function which simply makes
  sure that the arguments are interpreted in the correct way for the
  join function.  I may actually implement an on class with different
  subtypes, but this is probably not necessary.  A single #'on
  function could simply return the proper information for the join
  function, or the on function could be completely unnecessary and I
  may drop it in favor of lists with specific formatting.
  
  UPDATE: I've implemented
  a version of table-join and #'on that work well for inner joins, but
  I want a different style of join for this library.  The calling
  protocol should look something like this:

  (join tab1
      (on tab2
          (lambda (r2 r1)
            ...)
          :type :inner)
      (on tab3
          (lambda (r3 r2 r1)
            ...)
          :type :left)
      ...)

  where the idea is that the functions

  (defun join (table &rest on-fns) ...)
  (defun on (table condition &key (type :inner)))

  drive the join.  There would be specialized joins for cases that
  should be highly optimized, but the main idea of using indices-lists
  should still be the backbone of the algorithm.  The other main idea
  is that the condition functions receive arguments placed in the
  reverse order as they appear in the join call.  This is to allow a
  function to simply ignore tables that aren't interesting for the
  join.  I'm not 100% sold on that idea, but it does seem elegant.
  Another option is to have a keyword in the #'on function that
  controls the order of argument supply.

  The return type of #'on must facilitate all of this.  Currently,
  #'on returns a function that accepts table arguments and generates a
  list of row indices from each table that are present in an inner
  join of those tables with the condition applied.  Supporting left,
  right, and full joins should be much simpler when the operations are
  always binary and left-associative.

  UPDATE: More ideas.

  - Let the join-list on element be a function or a list of key joins.
    MS-SQL calls joining on equivalence "equijoins", so I might adopt
    the same terminology and call them equijoins as well.  MS-SQL uses
    merge joins or hash joins.  I'm considering only going with
    hash-table joins for now, so that each equijoin could specify
    equivalence relationships via lists of the form

    (op field field)

    where op is one of 'eq, 'eql, 'equal, or 'equalp, and each
    field is one of

    1. Field name.
    2. (table name-or-index)

    This would use #'eq to check the table in each (table
    name-or-index) list to see where it occurred in the join so that
    the join function can appropriately find the values to equate.
- [X] Table unions

   UPDATE: #'union shadows cl:union and provides support for SQL's
  "union" and "union all" statements.
- [X] Table CSV I/O
- [X] Table SQL I/O

  UPDATE: Fully functional.  Some additional tools for e.g. SQL->CSV
  are desirable but not yet implemented, although it is trivial to
  compose #'query and #'table->CSV to this end.
  
  UPDATE: Partially complete, tb:query can yield table from clsql
  output.
- [ ] cl-ana generic math integration
- [ ] cl-ana histogram integration (especially #'bin support)
- [ ] Table pretty-printing
- [ ] Table reader macro (not sure on this, could work for small
  tables)

* TODO [/] DSL
(fill in as ideas are developed)
