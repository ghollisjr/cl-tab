(require 'cl-tab)
(in-package :tb)

(defun example-join1 ()
  (let ((t1 (make-table '((1 2)
                          (3 4))
                        :field-names '("a" "b")))
        (t2 (make-table '((1 2)
                          (3 4))
                        :field-names '("c" "d")))
        (t3 (make-table '((1 2)
                          (3 4))
                        :field-names '("e" "f"))))
    (join t1
          (on t2 (lambda (r2 r1)
                   (and (elt r1 1)
                        (elt r2 0)
                        (< (elt r1 1)
                           (elt r2 0))))
              :type :left)
          (on t3 (lambda (r3 r2 &rest rest)
                   (declare (ignore rest))
                   (and  (elt r3 0)
                         (elt r2 0)
                         (= (elt r3 0)
                            (elt r2 0))))
              :type :left))))

(defun example-join2 ()
  (let ((t1 (make-table '((1 2)
                          (3 4))
                        :field-names '("a" "b")))
        (t2 (make-table '((1 2)
                          (3 4))
                        :field-names '("c" "d")))
        (t3 (make-table '((1 2)
                          (3 4))
                        :field-names '("e" "f"))))
    (join t1
          (on t2
              ;; equijoin on t1.b = t2.d
              (list (lambda (r1)
                      ;; useful macro to bind fields in a familiar
                      ;; way:
                      (tlet (r1 t1)
                        t1.b))
                    (lambda (r2)
                      (tlet (r2 t2)
                        t2.d)))
              :type :left)
          (on t3
              ;; equijoin on t2.c = t3.e
              (list (lambda (r2 r1)
                      (tlet (r2 t2)
                        t2.c))
                    (lambda (r3)
                      (tlet (r3 t3)
                        t3.e)))
              :type :full))))

(defun example-join3 ()
  (let ((t1 (make-table '((1 2)
                          (3 4))
                        :field-names '("a" "b")))
        (t2 (make-table '((1 2)
                          (3 4))
                        :field-names '("c" "d")))
        (t3 (make-table '((1 2)
                          (3 4))
                        :field-names '("e" "f"))))
    (join t1
          (on t2
              ;; equijoin on t1.a = t2.c and t1.b = t2.d
              (list (lambda (r1)
                      (tlet (r1 t1)
                        (list t1.a t1.b)))
                    (lambda (r2)
                      (tlet (r2 t2)
                        (list t2.c t2.d))))
              :type :left))))
